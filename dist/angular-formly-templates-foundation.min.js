// angular-formly-templates-foundation version 1.0.0-beta.2 built with ♥ by Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò)

!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("angular"),require("api-check"),require("angular-formly")):"function"==typeof define&&define.amd?define(["angular","api-check","angular-formly"],e):"object"==typeof exports?exports.ngFormlyTemplatesFoundation=e(require("angular"),require("api-check"),require("angular-formly")):t.ngFormlyTemplatesFoundation=e(t.angular,t.apiCheck,t.ngFormly)}(this,function(t,e,n){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return t[o].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";t.exports=n(2)},function(t,e,n){"use strict";var o=n(21);o.version||(o=window.angular),t.exports=o},function(t,e,n){"use strict";var o="formlyFoundation",r=n(1),i=r.module(o,[n(23)]);i.constant("formlyFoundationApiCheck",n(22)({output:{prefix:"angular-formly-foundation"}})),i.constant("formlyFoundationVersion","1.0.0-beta.2"),n(13)(i),n(7)(i),n(5)(i),t.exports=o},function(t,e,n){"use strict";t.exports=function(t){function e(t,e){var o=n(14),r=e.shape({"class":e.string.optional,text:e.string.optional}).strict.optional,i=e.shape({templateOptions:e.shape({addonLeft:r,addonRight:r})});t.templateManipulators.preWrapper.push(function(t,n){return"input"!==n.type||!n.templateOptions.addonLeft&&!n.templateOptions.addonRight?t:(e.warn([i],[n]),o.replace("<formly-transclude></formly-transclude>",t))})}e.$inject=["formlyConfig","formlyFoundationApiCheck"],t.run(e)}},function(t,e){"use strict";t.exports=function(t){function e(t){t.templateManipulators.preWrapper.push(function(t,e,n){if(angular.isDefined(e.templateOptions.description)&&"radio"!==e.type&&"checkbox"!==e.type){var o=document.createElement("div");o.appendChild(angular.element(t)[0]);var r=angular.element(o.querySelectorAll("[ng-model]"));return r?(o.appendChild(angular.element('<p id="'+n.id+'_description"class="help-block"ng-if="to.description">{{to.description}}</p>')[0]),r.attr("aria-describedby",n.id+"_description"),o.innerHTML):t}return t})}e.$inject=["formlyConfig"],t.run(e)}},function(t,e,n){"use strict";var o=function(t){return t&&t.__esModule?t["default"]:t},r=o(n(3)),i=o(n(4));t.exports=function(t){r(t),i(t)}},function(t,e,n){"use strict";t.exports=function(t){function e(t){t.setType({name:"checkbox",template:n(15),wrapper:["templateHasError"],apiCheck:function(t){return{templateOptions:{label:t.string}}}})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e,n){"use strict";t.exports=function(t){n(6)(t),n(9)(t),n(8)(t),n(10)(t),n(11)(t),n(12)(t)}},function(t,e){"use strict";t.exports=function(t){function e(t){t.setType({name:"input",template:'<input ng-model="model[options.key]">',wrapper:["templateLabel","templateHasError"],defaultOptions:{templateOptions:{type:"text"}}})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e,n){"use strict";t.exports=function(t){function e(t){t.setType({name:"multiCheckbox",template:n(16),wrapper:["templateLabel","templateHasError"],defaultOptions:{noFormControl:!1},apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional}}},controller:["$scope",function(t){function e(){t.model[o.key]=[],angular.forEach(t.multiCheckbox.checked,function(e,r){e&&t.model[o.key].push(n.options[r][n.valueProp||"value"])})}var n=t.to,o=t.options;t.multiCheckbox={checked:[],change:e};var r=t.model[o.key];angular.isArray(r)&&!function(){var e=n.valueProp||"value";angular.forEach(n.options,function(n,o){t.multiCheckbox.checked[o]=-1!==r.indexOf(n[e])})}()}]})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e,n){"use strict";t.exports=function(t){function e(t){t.setType({name:"radio",template:n(17),wrapper:["templateLabel","templateHasError"],defaultOptions:{noFormControl:!1},apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional}}}})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e,n){"use strict";t.exports=function(t){function e(t){t.setType({name:"select",template:n(18),wrapper:["templateLabel","templateHasError"],apiCheck:function(t){return{templateOptions:{options:t.arrayOf(t.object),labelProp:t.string.optional,valueProp:t.string.optional,groupProp:t.string.optional}}}})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e){"use strict";t.exports=function(t){function e(t){t.setType({name:"textarea",template:'<textarea class="" ng-model="model[options.key]"></textarea>',wrapper:["templateLabel","templateHasError"],defaultOptions:{ngModelAttrs:{rows:{attribute:"rows"},cols:{attribute:"cols"}}},apiCheck:function(t){return{templateOptions:{rows:t.number.optional,cols:t.number.optional}}}})}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e,n){"use strict";t.exports=function(t){function e(t){t.setWrapper([{name:"templateLabel",template:n(20),apiCheck:function(t){return{templateOptions:{label:t.string,required:t.bool.optional}}}},{name:"templateHasError",template:n(19)}])}e.$inject=["formlyConfigProvider"],t.config(e)}},function(t,e){t.exports='<div ng-class="{\'\': to.addonLeft || to.addonRight}">\n    <div class="" ng-if="to.addonLeft">\n        <i class="{{to.addonLeft.class}}" ng-if="to.addonLeft.class"></i>\n        <span ng-if="to.addonLeft.text">{{to.addonLeft.text}}</span>\n    </div>\n    <formly-transclude></formly-transclude>\n    <div class="" ng-if="to.addonRight">\n        <i class="{{to.addonRight.class}}" ng-if="to.addonRight.class"></i>\n        <span ng-if="to.addonRight.text">{{to.addonRight.text}}</span>\n    </div>\n</div>'},function(t,e){t.exports='<div class="checkbox">\n	<label>\n		<input type="checkbox"\n           class="formly-field-checkbox"\n		       ng-model="model[options.key]">\n		{{to.label}}\n		{{to.required ? \'*\' : \'\'}}\n	</label>\n</div>\n'},function(t,e){t.exports='<div ng-repeat="(key, option) in to.options" class="checkbox">\n  <label>\n    <input type="checkbox"\n           id="{{id + \'_\'+ $index}}"\n           ng-model="multiCheckbox.checked[$index]"\n           ng-change="multiCheckbox.change()">\n      {{option[to.labelProp || \'name\']}}\n  </label>\n</div>\n'},function(t,e){t.exports='<div ng-repeat="(key, option) in to.options" class="radio">\n  <label>\n    <input type="radio"\n           id="{{id + \'_\'+ $index}}"\n           tabindex="0"\n           ng-value="option[to.valueProp || \'value\']"\n           ng-model="model[options.key]">\n      {{option[to.labelProp || \'name\']}}\n  </label>\n</div>\n'},function(t,e){t.exports="<select\n  ng-model=\"model[options.key]\"\n  ng-options=\"option[to.valueProp || 'value'] as option[to.labelProp || 'name'] group by option[to.groupProp || 'group'] for option in to.options\">\n</select>"},function(t,e){t.exports='<div class="" ng-class="{\'has-error\': showError}">\n  <formly-transclude></formly-transclude>\n</div>\n'},function(t,e){t.exports="<label for=\"{{id}}\" class=\"\">\n  {{to.label}}\n  {{to.required ? '*' : ''}}\n</label>\n<formly-transclude></formly-transclude>\n"},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e){t.exports=n}])});
//# sourceMappingURL=angular-formly-templates-foundation.min.js.map